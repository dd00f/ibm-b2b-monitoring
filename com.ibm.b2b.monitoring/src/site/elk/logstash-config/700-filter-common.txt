
filter {

	if [type] == "filesystem" {
	    metrics {
			meter => "filesystemEvents"
			add_tag => "logstash-metric"
			flush_interval => 60
			clear_interval => 60
		}	
	}

	if [type] == "process" {
	    metrics {
			meter => "processEvents"
			add_tag => "logstash-metric"
			flush_interval => 60
			clear_interval => 60
		}	
					
		if [proc][name] == "java" {
			if [proc][cmdline] =~ "ws-server\.jar" {
				mutate {
					replace => { "[proc][name]" => "java-liberty" }
				}
			}
			else if [proc][cmdline] =~ "org\.apache\.catalina\.startup\.Bootstrap" {
				mutate {
					replace => { "[proc][name]" => "java-tomcat" }
				}
			}
			else if [proc][cmdline] =~ "air-monitor\.jar" {
				mutate {
					replace => { "[proc][name]" => "java-ucd-airmonitor" }
				}
			}
			else if [proc][cmdline] =~ "com\.urbancode\.air\.agent\.AgentWorker" {
				mutate {
					replace => { "[proc][name]" => "java-ucd-agent" }
				}
			}
			else if [proc][cmdline] =~ "logstash\/runner\.rb" {
				mutate {
					replace => { "[proc][name]" => "java-logstash" }
				}
			}
			else if [proc][cmdline] =~ "org\.elasticsearch\.bootstrap\.Elasticsearch" {
				mutate {
					replace => { "[proc][name]" => "java-elasticsearch" }
				}
			}				
			else if [proc][cmdline] =~ "com\.ibm\.wmqfte\.agent\.Agent" {
				mutate {
					replace => { "[proc][name]" => "java-wmqfte-agent" }
				}
			}			
			else if [proc][cmdline] =~ "com\.ibm\.monitoring\.mq\.Xmqqstat" {
				mutate {
					replace => { "[proc][name]" => "java-mq-monitor" }
				}
			}
			else if [proc][cmdline] =~ "PEST.bin.felix\.jar" {
				mutate {
					replace => { "[proc][name]" => "java-pest" }
				}
			}
			else if [proc][cmdline] =~ "graylog" {
				mutate {
					replace => { "[proc][name]" => "java-graylog" }
				}
			}
			else if [proc][cmdline] =~ "kafka" {
				mutate {
					replace => { "[proc][name]" => "java-kafka" }
				}
			}			
		}
		else if [proc][name] == "node" {
			if [proc][cmdline] =~ "kibana" {
				mutate {
					replace => { "[proc][name]" => "node-kibana" }
				}
			}
		}
	}
	
	if [beat][type] == "filebeat" {
		if ! [logLevel] {
			mutate {
				add_field => { "logLevel" => "UNKNOWN" }
			}
		}
		else {
			mutate{
				uppercase => [ "logLevel" ]
			}
		}

		# create a fingerprint to remove duplicates
		fingerprint {
		    source => ["host", "@timestamp", "message", "source"]
		    target => "[fingerprintId]"
		    key => "76767676"
		    method => "SHA1"
		    concatenate_sources => true
		}

		ruby {
		    init => "require 'time'"
		    code => "event['serverLag'] = Time.now().tv_sec - event['@timestamp'].tv_sec ;event['serverTime'] = Time.now().utc().iso8601();"
		}
		
		metrics {
			add_tag => "logstash-metric"
			timer => [ "serverLag", "%{serverLag}" ]
			flush_interval => 60
			clear_interval => 60
		}			
		
	    metrics {
			meter => "filebeatLogEvents"
			add_tag => "logstash-metric"
			flush_interval => 60
			clear_interval => 60
		}			
	}
	else if [beat][type] == "topbeat" {
		# nothing to do, already counted accurately
	}
	else if "logstash-metric" not in [tags] {
		mutate{
			add_tag => [ "_lostAndFound" ]
		}
	    metrics {
			meter => "lostAndFoundEvents"
			add_tag => "logstash-metric"
			flush_interval => 60
			clear_interval => 60
		}	
	}
	

}
