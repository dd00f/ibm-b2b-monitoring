
filter {

	if "Metric" in [tags] {
	
		# disable metrics until the infrastructure can handle it.
		# drop { }
	
		# "dir/performance-metrics-2016-08-11T18-11-25Z.csv"
		grok {
			match => {"source"  => ".*metrics-(?<dateTime>[0-9]{1,}-[0-9]{1,}-[0-9]{1,}T[0-9]{1,}-[0-9]{1,}-[0-9]{1,})Z\.csv" }
		}
		
		if "_grokparsefailure" not in [tags] {
			date {
				match => [ "dateTime", "YYYY-MM-dd'T'HH-mm-ss" ]
				remove_field => ["dateTime"]
				timezone => "UTC"
			}
		}

		split { 
			field => "message"
		}

		# ignore title lines
		if [message] =~ "Name\,Number of calls\,Average" {
			drop { }
		}
		
		grok {
			match => {"message"  => "(?<operation>[^,]{1,}),%{NUMBER:callCount:int},%{NUMBER:averageDurationMs:float},%{NUMBER:minimumDurationMs:float},%{NUMBER:maximumDurationMs:float},%{NUMBER:totalDurationMs:float},%{NUMBER:averageSize:float},%{NUMBER:maximumSize:float},%{NUMBER:totalSize:float},%{NUMBER:cacheEnabledCount:int},%{NUMBER:cacheHitCount:int},%{NUMBER:errorCount:int},%{NUMBER:callCountRecent:int},%{NUMBER:averageDurationMsRecent:float},%{NUMBER:minimumDurationMsRecent:float},%{NUMBER:maximumDurationMsRecent:float},%{NUMBER:totalDurationMsRecent:float},%{NUMBER:averageSizeRecent:float},%{NUMBER:maximumSizeRecent:float},%{NUMBER:totalSizeRecent:float},%{NUMBER:cacheEnabledCountRecent:int},%{NUMBER:cacheHitCountRecent:int},%{NUMBER:errorCountRecent:int}" }
			remove_field => ["message","logLevel","loggerName","threadName","threadId","count","fields","offset"]
		}
		
	    metrics {
			meter => "profilerEvents"
			add_tag => "logstash-metric"
			flush_interval => 60
			clear_interval => 60
		}
				
		# skip metrics that haven't changed since the last time we gathered them
		if "logstash-metric" not in [tags] {
			if [callCountRecent] == 0 {
			    metrics {
					meter => "profilerDropEvents"
					flush_interval => 60
					clear_interval => 60
					add_tag => "logstash-metric"
				}
				if "logstash-metric" not in [tags] {
					drop { }
				}
			}
			
			if "logstash-metric" not in [tags] {
				# create a fingerprint to remove duplicates
				fingerprint {
				    source => ["host", "@timestamp", "operation"]
				    target => "[fingerprintId]"
				    key => "76767676"
				    method => "SHA1"
				    concatenate_sources => true
				}
				
				ruby {
				    init => "require 'time'"
				    code => "event['serverLag'] = Time.now().tv_sec - event['@timestamp'].tv_sec ;event['serverTime'] = Time.now().utc().iso8601();"
				}
				
				metrics {
					add_tag => "logstash-metric"
					timer => [ "profilerServerLag", "%{serverLag}" ]
					flush_interval => 60
					clear_interval => 60
				}
			}

		}
		
	}

}
